// Copyright 2022 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * Note: This file is deprecated in favor of the TypeScript version at
 * ui/webui/resources/js/icon.ts. icon.ts should be used by all TypeScript
 * files, and can also be used by any JS file that is not using closure
 * compiler for typechecking.
 */

/**
 * @return {!Array<number>} The scale factors supported by this platform for
 *     webui resources.
 */
function getSupportedScaleFactors() {
  // 1 is supported to match code in ResourceBundle::InitSharedInstance() that
  // supports SCALE_FACTOR_100P on all non-iOS platforms.
  // All desktop platforms including Ash support zooming which also updates the
  // renderer's device scale factors (a.k.a devicePixelRatio), and these
  // platforms have high DPI assets for 2x.  Let the renderer pick the closest
  // image for the current device scale factor.
  return [1, 2];
}

/**
 * Generates a CSS url string.
 * @param {string} s The URL to generate the CSS url for.
 * @return {string} The CSS url string.
 */
export function getUrlForCss(s) {
  // http://www.w3.org/TR/css3-values/#uris
  // Parentheses, commas, whitespace characters, single quotes (') and double
  // quotes (") appearing in a URI must be escaped with a backslash
  const s2 = s.replace(/(\(|\)|\,|\s|\'|\"|\\)/g, '\\$1');
  return `url("${s2}")`;
}

/**
 * Generates a CSS -webkit-image-set for a chrome:// url.
 * An entry in the image set is added for each of getSupportedScaleFactors().
 * The scale-factor-specific url is generated by replacing the first instance
 * of 'scalefactor' in |path| with the numeric scale factor.
 *
 * @param {string} path The URL to generate an image set for.
 *     'scalefactor' should be a substring of |path|.
 * @return {string} The CSS -webkit-image-set.
 */
function getImageSet(path) {
  const supportedScaleFactors = getSupportedScaleFactors();

  const replaceStartIndex = path.indexOf('SCALEFACTOR');
  if (replaceStartIndex < 0) {
    return getUrlForCss(path);
  }

  let s = '';
  for (let i = 0; i < supportedScaleFactors.length; ++i) {
    const scaleFactor = supportedScaleFactors[i];
    const pathWithScaleFactor = path.substr(0, replaceStartIndex) +
        scaleFactor + path.substr(replaceStartIndex + 'scalefactor'.length);

    s += getUrlForCss(pathWithScaleFactor) + ' ' + scaleFactor + 'x';

    if (i !== supportedScaleFactors.length - 1) {
      s += ', ';
    }
  }
  return '-webkit-image-set(' + s + ')';
}

/**
 * Returns the URL of the image, or an image set of URLs for the provided
 * path.  Resources in chrome://theme have multiple supported scale factors.
 *
 * @param {string} path The path of the image.
 * @return {string} The url, or an image set of URLs.
 */
export function getImage(path) {
  const chromeThemePath = 'chrome://theme';
  const isChromeThemeUrl =
      (path.slice(0, chromeThemePath.length) === chromeThemePath);
  return isChromeThemeUrl ? getImageSet(path + '@SCALEFACTORx') :
                            getUrlForCss(path);
}
