// Copyright 2022 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.cloud_upload.mojom;

// The selected action when the user closes the dialog.
enum UserAction {
  kCancel,
  kSetUpGoogleDrive,
  kSetUpOneDrive,
  kUploadToGoogleDrive,
  kUploadToOneDrive,
  kConfirmOrUploadToGoogleDrive,
  kConfirmOrUploadToOneDrive,
};

// Options for which sub-page/flow we want to show.
enum DialogPage {
  // The user can choose between apps for handling office files.
  kFileHandlerDialog,
  // Set up OneDrive (multi-page).
  kOneDriveSetup,
  // Set up Google Drive (one-page confirmation screen).
  kGoogleDriveSetup,
  // Confirm that the user wants to move the file to OneDrive.
  kMoveConfirmationOneDrive,
  // Confirm that the user wants to move the file to Google Drive.
  kMoveConfirmationGoogleDrive,
};

// Contains the arguments used to set up the dialog.
struct DialogArgs {
  // List of files that will be uploaded on dialog close if the user completes
  // the setup. May be empty if the dialog wasn't initiated from a file handler.
  array<string> file_names;

  // Tells the dialog which sub-page/flow we want to show.
  DialogPage dialog_page;
};

// Lives in the browser process. A renderer uses this to create a page handler
// that enables communication between a renderer and the browser process.
interface PageHandlerFactory {
  // Creates a page handler to enable communication with the browser process.
  CreatePageHandler(pending_receiver<PageHandler> handler);
};

// Lives in the browser process. A renderer uses this to invoke methods that
// are implemented in the browser process.
interface PageHandler {
  // Returns arguments passed to the dialog on creation.
  GetDialogArgs() => (DialogArgs args);

  // Returns whether or not the Office web app is installed.
  IsOfficeWebAppInstalled() => (bool installed);

  // Attempts to install the Office web app. Returns whether the web app
  // successfully installed or was already installed.
  InstallOfficeWebApp() => (bool installed);

  // Returns whether or not the OneDrive filesystem is mounted.
  IsODFSMounted() => (bool mounted);

  // Starts the OneDrive authentication process.
  SignInToOneDrive() => (bool success);

  // Returns the user selected action and requests the dialog to be closed.
  RespondAndClose(UserAction response);

  // Set Office as the default file handler for office files and mark the
  // setup as complete so that it does not need to be started again.
  SetOfficeAsDefaultHandler();

  // Set the preference for whether we should always move office files without
  // asking the user first.
  SetAlwaysMoveOfficeFiles(bool always_move);
};
