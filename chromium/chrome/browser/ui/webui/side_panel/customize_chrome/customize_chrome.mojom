// Copyright 2022 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module side_panel.mojom;

import "skia/public/mojom/skcolor.mojom";
import "url/mojom/url.mojom";

// The background image URL and styling.
struct BackgroundImage {
  // URL to the background image. Can point to untrusted content.
  url.mojom.Url url;
  // Whether the image is a local resource.
  bool is_uploaded_image;
  // Title of the background image.
  string title;
};

// A generic theme.
struct Theme {
  // The background image.
  BackgroundImage? background_image;
  // Whether the OS is in dark mode.
  bool system_dark_mode;
  // The current theme background color.
  skia.mojom.SkColor background_color;
  // The current theme foreground color. If not set, we use the default theme.
  skia.mojom.SkColor? foreground_color;
  // The color of the color picker icon.
  skia.mojom.SkColor color_picker_icon_color;
};

struct ChromeColor {
  // Localized string of the color name.
  string name;
  // The foreground color.
  skia.mojom.SkColor background;
  // The background color.
  skia.mojom.SkColor foreground;
};

// A collection of background images.
struct BackgroundCollection {
  // Collection identifier.
  string id;
  // Localized string of the collection name.
  string label;
  // URL to a preview image for the collection. Can point to untrusted content.
  url.mojom.Url preview_image_url;
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface CustomizeChromePageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePageHandler(pending_remote<CustomizeChromePage> page,
                    pending_receiver<CustomizeChromePageHandler> handler);
};

// Browser-side handler for requests from WebUI page.
interface CustomizeChromePageHandler {
  // Sets the visibility of NTP tiles and whether custom links are enabled.
  SetMostVisitedSettings(bool custom_links_enabled, bool shortcuts_visible);

  // Returns the visibility of NTP tiles and whether custom links are enabled.
  GetMostVisitedSettings() => (bool custom_links_enabled,
                               bool shortcuts_visible);

  // Returns the chrome colors used in the customize chrome side panel.
  GetChromeColors() => (array<ChromeColor> colors);

  // Returns the collections of background images.
  GetBackgroundCollections() => (array<BackgroundCollection> collections);

  // Triggers a call to |CustomizeChromePage.SetTheme()|.
  UpdateTheme();

  // Sets Chrome's theme according to the default color.
  SetDefaultColor();

  // Sets Chrome's theme according to |foreground_color|.
  SetForegroundColor(skia.mojom.SkColor foreground_color);

  // Sets theme to default classic chrome.
  SetClassicChromeDefaultTheme();
};

// WebUI-side handler for requests from the browser.
interface CustomizeChromePage {
   // Sets the current theme.
   SetTheme(Theme theme);
};
