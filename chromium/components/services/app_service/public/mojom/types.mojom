// Copyright 2018 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module apps.mojom;

import "mojo/public/mojom/base/file_path.mojom";
import "mojo/public/mojom/base/safe_base_name.mojom";
import "mojo/public/mojom/base/time.mojom";

// Information about an app. See components/services/app_service/README.md.
// Mojom App struct is DEPRECATED. When adding new fields, please use the App
// struct in components/services/app_service/public/cpp/app_types.h.
struct App {
  AppType app_type;
  string app_id;

  // The fields above are mandatory. Everything else below is optional.

  Readiness readiness;
  string? name;
  string? short_name;

  // An optional, publisher-specific ID for this app, e.g. for Android apps,
  // this field contains the Android package name, and for web apps, it
  // contains the start URL.
  string? publisher_id;

  string? description;
  string? version;
  array<string> additional_search_terms;
  IconKey? icon_key;
  mojo_base.mojom.Time? last_launch_time;
  mojo_base.mojom.Time? install_time;

  // This vector must be treated atomically, if there is a permission
  // change, the publisher must send through the entire list of permissions.
  // Should contain no duplicate IDs.
  // If empty during updates, Subscriber can assume no changes.
  // There is no guarantee that this is sorted by any criteria.
  array<Permission> permissions;

  // Whether the app was installed by sync, policy or as a default app.
  InstallReason install_reason;

  // Where the app was installed from, e.g. from play sstore, from chrome web
  // store, etc.
  InstallSource install_source;

  // IDs used for policy to identify the app.
  // For web apps, it contains the install URL(s).
  array<string> policy_ids;

  // Whether the app is an extensions::Extensions where is_platform_app()
  // returns true.
  OptionalBool is_platform_app;

  // TODO(nigeltao): be more principled, instead of ad hoc show_in_xxx and
  // show_in_yyy fields?
  OptionalBool recommendable;
  OptionalBool searchable;
  OptionalBool show_in_launcher;
  OptionalBool show_in_shelf;
  OptionalBool show_in_search;
  OptionalBool show_in_management;

  // kTrue if the app is able to handle intents and should be shown in intent
  // surfaces.
  OptionalBool handles_intents;

  // Whether the app publisher allows the app to be uninstalled.
  OptionalBool allow_uninstall;

  // Whether the app icon should add the notification badging.
  OptionalBool has_badge;

  // Paused apps cannot be launched, and any running apps that become paused
  // will be stopped. This is independent of whether or not the app is ready to
  // be launched (defined by the Readiness field).
  OptionalBool paused;

  // This vector stores all the intent filters defined in this app. Each
  // intent filter defines a matching criteria for whether an intent can
  // be handled by this app. One app can have multiple intent filters.
  array<IntentFilter> intent_filters;

  // Whether the app can be free resized. If this is true, various resizing
  // operations will be restricted.
  OptionalBool resize_locked;

  // Whether the app's display mode is in the browser or otherwise.
  WindowMode window_mode;

  // Whether the app runs on os login.
  RunOnOsLogin? run_on_os_login;
  // When adding new fields, also update the App struct in
  // components/services/app_service/public/cpp/app_types.* and the Merge method
  // and other helpers in
  // components/services/app_service/public/cpp/app_update.*
};

struct Permission {
  PermissionType permission_type;
  PermissionValue value;
  // If the permission is managed by an enterprise policy.
  bool is_managed;
};

// The types of permissions in App Service.
enum PermissionType {
  kUnknown         = 0,
  kCamera          = 1,
  kLocation        = 2,
  kMicrophone      = 3,
  kNotifications   = 4,
  kContacts        = 5,
  kStorage         = 6,
  kPrinting        = 7,
  kFileHandling    = 8,
};

// The types of apps available in the registry.
enum AppType {
  kUnknown = 0,
  kArc,                   // Android app.
  kBuiltIn,               // Built-in app.
  kCrostini,              // Linux (via Crostini) app.
  kChromeApp,             // Chrome app.
  kWeb,                   // Web app.
  kMacOs,                 // Mac OS app.
  kPluginVm,              // Plugin VM app, see go/pluginvm.
  kStandaloneBrowser,     // Lacros browser app, see //docs/lacros.md.
  kRemote,                // Remote app.
  kBorealis,              // Borealis app, see go/borealis-app.
  kSystemWeb,             // System web app.
  kStandaloneBrowserChromeApp,  // Chrome app hosted in Lacros.
  kExtension,             // Browser extension.
  kStandaloneBrowserExtension,  // Extension hosted in Lacros.
};

// Whether an app is ready to launch, i.e. installed.
// Note the enumeration is used in UMA histogram so entries should not be
// re-ordered or removed. New entries should be added at the bottom.
enum Readiness {
  kUnknown = 0,
  kReady,                // Installed and launchable.
  kDisabledByBlocklist,  // Disabled by SafeBrowsing.
  kDisabledByPolicy,     // Disabled by admin policy.
  kDisabledByUser,       // Disabled by explicit user action.
  kTerminated,           // Renderer process crashed.
  kUninstalledByUser,
  // Removed apps are purged from the registry cache and have their
  // associated memory freed. Subscribers are not notified of removed
  // apps, so publishers must set the app as uninstalled before
  // removing it.
  kRemoved,
  kUninstalledByMigration,
};

// How the app was installed.
// This should be kept in sync with histogram.xml, and InstallSource in
// enums.xml.
// Note the enumeration is used in UMA histogram so entries should not be
// re-ordered or removed. New entries should be added at the bottom.
enum InstallReason {
  kUnknown = 0,
  kSystem,     // Installed with the system and is considered a part of the OS.
  kPolicy,     // Installed by policy.
  kOem,        // Installed by an OEM.
  kDefault,    // Preinstalled by default, but is not considered a system app.
  kSync,       // Installed by sync.
  kUser,       // Installed by user action.
  kSubApp,     // Installed by the SubApp API call.
  kKiosk,      // Installed by Kiosk on Chrome OS.
  kCommandLine,  // Installed by the command line argument.
};

// Where the app was installed from.
enum InstallSource {
  kUnknown = 0,
  kSystem,          // Installed as part of Chrome OS.
  kSync,            // Installed from sync.
  kPlayStore,       // Installed from Play store.
  kChromeWebStore,  // Installed from Chrome web store.
  kBrowser,         // Installed from browser.
};

// Augments a bool to include an 'unknown' value.
enum OptionalBool {
  kUnknown = 0,
  kFalse,
  kTrue,
};

struct IconKey {
  // A timeline value for icons that do not change.
  const uint64 kDoesNotChangeOverTime = 0;

  const int32 kInvalidResourceId = 0;

  // A monotonically increasing number so that, after an icon update, a new
  // IconKey, one that is different in terms of field-by-field equality, can be
  // broadcast by a Publisher.
  //
  // The exact value of the number isn't important, only that newer IconKey's
  // (those that were created more recently) have a larger timeline than older
  // IconKey's.
  //
  // This is, in some sense, *a* version number, but the field is not called
  // "version", to avoid any possible confusion that it encodes *the* app's
  // version number, e.g. the "2.3.5" in "FooBar version 2.3.5 is installed".
  //
  // For example, if an app is disabled for some reason (so that its icon is
  // grayed out), this would result in a different timeline even though the
  // app's version is unchanged.
  uint64 timeline;
  // If non-zero (or equivalently, not equal to kInvalidResourceId), the
  // compressed icon is compiled into the Chromium binary as a statically
  // available, int-keyed resource.
  int32 resource_id;
  // A bitmask of icon post-processing effects, such as desaturation to gray
  // and rounding the corners.
  uint32 icon_effects;

  // When adding new fields, also update the IconLoader::Key type in
  // components/services/app_service/public/cpp/icon_loader.*
};

enum IconType {
  // Sentinel value used in error cases.
  kUnknown,
  // Icon as an uncompressed gfx::ImageSkia with no standard Chrome OS mask.
  kUncompressed,
  // Icon as compressed bytes with no standard Chrome OS mask.
  kCompressed,
  // Icon as an uncompressed gfx::ImageSkia with the standard Chrome OS mask
  // applied. This is the default suggested icon type.
  kStandard,
};

enum TriState {
  kAllow,
  kBlock,
  kAsk,
};

union PermissionValue {
  bool bool_value;
  TriState tristate_value;
};

// The intent filter matching condition types.
enum ConditionType {
  kScheme,         // Matches the URL scheme (e.g. https, tel).
  kHost,           // Matches the URL host (e.g. www.google.com).
  kPath,           // Matches the URL path (e.g. /abc/*).
  kAction,         // Matches the action type (e.g. view, send).
  kMimeType,       // Matches the top-level mime type (e.g. text/plain).
  kFile,           // Matches against all files.
};

// The pattern match type for intent filter pattern condition.
enum PatternMatchType {
  // kNone = 0   Deprecated. Use kLiteral which has the same function
  kLiteral = 1,
  kPrefix,
  kGlob,
  kMimeType,
  kFileExtension,
  kIsDirectory,
  kSuffix
};

// For pattern type of condition, the value match will be based on the pattern
// match type. If the match_type is kNone, then an exact match with the value
// will be required.
struct ConditionValue {
  string value;
  PatternMatchType match_type; // This will be None for non pattern conditions.
};

// The condition for an intent filter. It matches if the intent contains this
// condition type and the corresponding value matches with any of the
// condition_values.
struct Condition {
  ConditionType condition_type;
  array<ConditionValue> condition_values;
};

// An intent filter is defined by an app, and contains a list of conditions that
// an intent needs to match. If all conditions match, then this intent filter
// matches against an intent.
struct IntentFilter {
  array<Condition> conditions;

  // Activity which registered this filter. We only fill this field for ARC
  // share intent filters and Web App file_handlers.
  string? activity_name;

  // The label shown to the user for this activity.
  string? activity_label;
};

struct FilePaths {
  array<mojo_base.mojom.FilePath> file_paths;
};

// Information about whether an app is accessing some capability, e.g. camera,
// microphone.
struct CapabilityAccess {
  string app_id;

  // The fields above are mandatory. Everything else below is optional.

  // Whether the app is accessing camera.
  OptionalBool camera;

  // Whether the app is accessing microphone.
  OptionalBool microphone;

  // When adding new fields, also update the Merge method and other helpers in
  // components/services/app_service/public/cpp/access_update.*
};

// The window mode that each app will open in.
enum WindowMode {
  kUnknown = 0,
  // Opens in a standalone window
  kWindow,
  // Opens in the default web browser
  kBrowser,
  // Opens in a tabbed app window
  kTabbedWindow,
};

// The RunOnOsLoginModes must be kept in sync
// with RunOnOsLoginMode in
// chrome/browser/web_applications/web_app_constants.h
enum RunOnOsLoginMode {
  kUnknown = 0,
  // App won't run on OS Login.
  kNotRun,
  // App will run in windowed mode on OS Login.
  kWindowed,
};

// RunOnOsLoginMode struct to be used
// to verify if the mode is set by policy
// or not.
struct RunOnOsLogin {
  RunOnOsLoginMode login_mode;
  // If the run on os login mode is policy
  // controlled or not.
  bool is_managed;
};
