{% from 'templates/macros.tmpl' import license, source_files_for_generated_file %}
{{license()}}

{{source_files_for_generated_file(template_file, input_files)}}

#include "third_party/blink/public/mojom/runtime_feature_state/runtime_feature_state.mojom-shared.h"
#include "third_party/blink/renderer/platform/runtime_feature_state/runtime_feature_state_override_context.h"

namespace blink {
{% for feature in overridable_features %}
bool RuntimeFeatureStateOverrideContext::
    Is{{feature.name}}ForceDisabled() {
  auto it = override_values_.find(
      blink::mojom::RuntimeFeatureState::k{{feature.name}});
  if (it != override_values_.end() && it->second == false)
    return true;

  return false;
}

bool RuntimeFeatureStateOverrideContext::
    Is{{feature.name}}ForceEnabled() {
  auto it = override_values_.find(
      blink::mojom::RuntimeFeatureState::k{{feature.name}});
  if(it != override_values_.end() && it->second == true)
    return true;

  return false;
}

void RuntimeFeatureStateOverrideContext::
    Set{{feature.name}}ForceDisabled() {
  override_values_
      [blink::mojom::RuntimeFeatureState::k{{feature.name}}] =
          false;
}

void RuntimeFeatureStateOverrideContext::
    Set{{feature.name}}ForceEnabled() {
  override_values_
      [blink::mojom::RuntimeFeatureState::k{{feature.name}}] =
          true;
}

{% endfor %}
void RuntimeFeatureStateOverrideContext::ApplyEnterprisePolicyOverrides() {
  // Get the enterprise policies here.
}

}  // namespace blink