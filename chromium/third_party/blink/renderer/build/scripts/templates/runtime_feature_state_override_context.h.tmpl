{% from 'templates/macros.tmpl' import license, source_files_for_generated_file %}
{{license()}}

{{source_files_for_generated_file(template_file, input_files)}}

#ifndef {{header_guard}}
#define {{header_guard}}

#include "base/containers/flat_map.h"
#include "third_party/blink/public/mojom/runtime_feature_state/runtime_feature_state.mojom-shared.h"
#include "third_party/blink/renderer/platform/heap/garbage_collected.h"
#include "third_party/blink/renderer/platform/platform_export.h"

namespace blink {

// This class coalesces browser side and enterprise policy state into a final
// value which is then used to override the blink runtime feature state. It can
// be queried with `Is*ForceEnabled()` or `Is*ForceDisabled()`.
class PLATFORM_EXPORT RuntimeFeatureStateOverrideContext
    : public GarbageCollected<RuntimeFeatureStateOverrideContext> {
 public:
  RuntimeFeatureStateOverrideContext() {
    override_values_.reserve({{overridable_features|length()}});
    ApplyEnterprisePolicyOverrides();
  }

  {% for feature in overridable_features %}
  bool Is{{feature.name}}ForceDisabled();

  bool Is{{feature.name}}ForceEnabled();

  void Set{{feature.name}}ForceDisabled();

  void Set{{feature.name}}ForceEnabled();

  {% endfor %}
  void Trace(Visitor*) const {}

 private:
  void ApplyEnterprisePolicyOverrides();

  base::flat_map<blink::mojom::RuntimeFeatureState, bool> override_values_;
};

}  // namespace blink

#endif // {{header_guard}}
