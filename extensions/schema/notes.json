// Copyright (c) 2015 Vivaldi Technologies AS. All rights reserved

[
  {
    "namespace": "notes",
    "description": "Use the <code>chrome.notes</code> API to manipulate notes.",
    "types": [
      {
        "id": "NodeType",
        "description": "The kind of the node.",
        "type": "string",
        "enum": [ {
          "name": "note",
          "description": "A regular note. May have attachments as children."
        }, {
          "name": "separator",
          "description": "A separator"
        }, {
          "name": "attachment",
          "description": "An attachment. Content is the attachment checksum."
        }, {
          "name": "folder",
          "description": "A folder. May have notes and separators as children."
        }, {
          "name": "main",
          "description": "The main notes folder."
        }, {
          "name": "other",
          "description": "The other notes folder."
        }, {
          "name": "trash",
          "description": "The trash."
        } ]
      },
      {
        "id": "NoteTreeNode",
        "type": "object",
        "description": "A node (either a note-entry or a folder) in the notes tree. Child nodes are ordered within their parent folder.",
        "properties": {
          "id": {
            "type": "string",
            "minimum": 0,
            "description": "The unique identifier for the node. IDs are unique within the current profile, and they remain valid even after the browser is restarted."
          },
          "parentId": {
            "type": "string",
            "minimum": 0,
            "optional": true,
            "description": "The <code>id</code> of the parent folder. Omitted for the root node."
          },
          "index": {
            "type": "integer",
            "optional": true,
            "description": "The 0-based position of this node within its parent folder. Omitted for the root node."
          },
          "title": {
            "type": "string",
            "description": "Title/subject of note."
          },
          "content": {
            "type": "string",
            "optional": true,
            "description": "The content of the note. Omitted for separators and folders. For attachments, this contains the attachment checksum."
          },
          "url": {
            "type": "string",
            "optional": true,
            "description": "A URL associated with the note. Omitted for separators and folders."
          },
          "dateAdded": {
            "type": "number",
            "optional": true,
            "description": "When this node was created, in milliseconds since the epoch (<code>new Date(dateAdded)</code>)."
          },
          "children": {
            "type": "array",
            "optional": true,
            "items": { "$ref": "NoteTreeNode" },
            "description": "An ordered list of children of this node. Only present for folders"
          },
          "type": {
            "$ref": "NodeType",
            "description": "Which kind of node this is."
          }
        }
      },
      {
        "id": "CreateDetails",
        "description": "Object passed to the create() function.",
        "inline_doc": true,
        "type": "object",
        "properties": {
          "parentId": {
            "type": "string",
            "serialized_type": "int64",
            "optional": true,
            "description": "Defaults to the root folder."
          },
          "index": {
            "type": "integer",
            "minimum": 0,
            "optional": true
          },
          "type": {
            "$ref": "NodeType"
          },
          "title": {
            "type": "string",
            "optional": true
          },
          "url": {
            "type": "string",
            "optional": true
          },
          "content": {
            "type": "string",
            "description": "The content of the node. For attachments, this is either a known attachment checksum copied from another attachment or a new base64-encoded attachment content",
            "optional": true
          }
        }
      }
    ],
    "functions": [
      {
        "name": "get",
        "type": "function",
        "description": "Retrieves the specified NoteTreeNode(s).",
        "parameters": [
          {
            "name": "idOrIdList",
            "description": "A single string-valued id, or an array of string-valued ids",
            "choices": [
              {
                "type": "string",
                "serialized_type": "int64"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "serialized_type": "int64"
                },
                "minItems": 1
              }
            ]
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "results",
              "type": "array",
              "items": { "$ref": "NoteTreeNode" }
            }
          ]
        }
      },
      {
        "name": "getTree",
        "type": "function",
        "description": "Retrieves the entire Notes hierarchy.",
        "parameters": [],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "results",
              "type": "array",
              "items": { "$ref": "NoteTreeNode" }
            }
          ]
        }
      },
      {
        "name": "create",
        "type": "function",
        "description": "Creates a bookmark or folder under the specified parentId.",
        "parameters": [
          {
            "$ref": "CreateDetails",
            "name": "note"
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "name": "result",
              "$ref": "NoteTreeNode"
            }
          ]
        }
      },
      {
        "name": "update",
        "type": "function",
        "description": "Updates the properties of a note or folder. Specify only the properties that you want to change; unspecified properties will be left unchanged. <b>Note:</b> Currently, only 'title' and 'url' are supported.",
        "parameters": [
          {
            "type": "string",
            "serialized_type": "int64",
            "name": "id"
          },
          {
            "type": "object",
            "name": "changes",
            "properties": {
              "title": {
                "type": "string",
                "optional": true
              },
              "content": {
                "type": "string",
                "optional": true
              },
              "url": {
                "type": "string",
                "optional": true
              }
            }
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "name": "result",
              "$ref": "NoteTreeNode"
            }
          ]
        }
      },
      {
        "name": "remove",
        "type": "function",
        "description": "Removes a note or an empty folder.",
        "parameters": [
          {
            "type": "string",
            "serialized_type": "int64",
            "name": "id"
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      },
      {
        "name": "search",
        "type": "function",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "description": "A string of words matched agains note contents.",
            "type": "string"
          }
        ],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "results",
              "type": "array",
              "items": { "$ref": "NoteTreeNode" }
            }
          ]
        }
      },
      {
        "name": "move",
        "type": "function",
        "description": "Moves the specified node to the provided location.",
        "parameters": [
          {
            "type": "string",
            "serialized_type": "int64",
            "description": "The id to be moved",
            "name": "id"
          },
          {
            "type": "object",
            "name": "destination",
            "description": "Object describing the target location",
            "properties": {
              "parentId": {
                "type": "string",
                "description": "Id of target folder",
                "optional": true
              },
              "index": {
                "type": "integer",
                "description": "The index inside the target folder",
                "minimum": 0,
                "optional": true
              }
            }
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "name": "result",
              "$ref": "NoteTreeNode"
            }
          ]
        }
      },
      {
        "name": "emptyTrash",
        "type": "function",
        "description": "Empty the notes trash folder.",
        "parameters": [],
        "returns_async": {
          "name": "callback",
          "parameters": [
            {
              "name": "success",
              "type": "boolean",
              "description": "true if the operation was successful, otherwise false."
            }
          ]
        }
      }
    ],
    "events": [
      {
        "name": "onCreated",
        "type": "function",
        "description": "Fired when a bookmark or folder is created.",
        "parameters": [
          {
            "type": "string",
            "name": "id"
          },
          {
            "$ref": "NoteTreeNode",
            "name": "note"
          }
        ]
      },
      {
        "name": "onRemoved",
        "type": "function",
        "description": "Fired when a note or folder is removed. When a folder is removed recursively, a single notification is fired for the folder, and none for its contents.",
        "parameters": [
          {
            "type": "string",
            "name": "id"
          },
          {
            "type": "object",
            "name": "removeInfo",
            "properties": {
              "parentId": { "type": "string" },
              "index": { "type": "integer" }
            }
          }
        ]
      },
      {
        "name": "onChanged",
        "type": "function",
        "description": "Fired when a note or folder changes.",
        "parameters": [
          {
            "type": "string",
            "name": "id"
          },
          {
            "type": "object",
            "name": "noteAfterChange",
            "properties": {
              "title": {
                "type": "string"
              },
              "content": {
                "type": "string",
                "optional": true
              },
              "url": {
                "type": "string",
                "optional": true
              }
            }
          }
        ]
      },
      {
        "name": "onMoved",
        "type": "function",
        "description": "Fired when a note or folder is moved.",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the moved note",
            "name": "id"
          },
          {
            "type": "object",
            "name": "moveInfo",
            "properties": {
              "parentId": {
                "type": "string",
                "description": "The id of the parent folder"
              },
              "index": {
                "type": "integer",
                "description": "The index inside the parent folder"
              },
              "oldParentId": {
                "type": "string",
                "description": "Previous parent id"
              },
              "oldIndex": {
                "type": "integer",
                "description": "Previous index inside the parent folder"
              }
            }
          }
        ]
      },
      {
        "name": "onImportBegan",
        "type": "function",
        "description": "Fired when a notes import session is begun.  Expensive observers should ignore onCreated updates until onImportEnded is fired.  Observers should still handle other notifications immediately.",
        "parameters": []
      },
      {
        "name": "onImportEnded",
        "type": "function",
        "description": "Fired when a notes import session is ended.",
        "parameters": []
      }
    ]
  }
]
